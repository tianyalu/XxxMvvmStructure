apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

}

//implementation: 完全等同于compile指令，没区别，你将所有的compile改成api，完全没有错
//api: 这个指令的特点就是，对于使用了该命令编译的依赖，对该项目有依赖的项目将无法访问到使用该命令编译的依赖中的任何程序，也就是将该依赖隐藏在内部，而不对外部公开。
dependencies {
    implementation "com.squareup.retrofit2:retrofit:2.3.0"
    api "com.squareup.retrofit2:converter-gson:2.3.0"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    //把返回结果Call转为Observable
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    api 'io.reactivex.rxjava2:rxjava:2.2.12'

    api 'androidx.preference:preference:1.0.0'
    api project(':base')
}
